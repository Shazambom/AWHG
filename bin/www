#!/usr/bin/env node

/**
 * Module dependencies.
 */

let app = require('../app');
let debug = require('debug')('awhg-server:server');
let http = require('http');
let https = require('https');
let fs = require('fs');
let options = {
    key: fs.readFileSync('./ssl/key.pem', 'utf8'),
    cert: fs.readFileSync('./ssl/server.crt', 'utf8'),
    ca: fs.readFileSync('./ssl/csr.pem', 'utf8')
};


let server = https.createServer(options, app);


let httpServer = http.createServer(app);


/**
 * Listen on provided port, on all network interfaces.
 */

let sslport = 8443;
let httpport = 8080;

server.listen(sslport);
httpServer.listen(httpport);
server.on('error', (error) => onError(error, sslport));
server.on('listening', () => onListening(server));
httpServer.on('error', (error) => onError(error, httpport));
httpServer.on('listening', () => onListening(httpServer));

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error, port) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening(server) {
  let addr = server.address();
  let bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
